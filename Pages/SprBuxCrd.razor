@page "/sprbuxcrd"
@layout MainLayout


@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns

@using DauaPharm.Data;
@using DauaPharm.Data.Entities;

@inject AppState AppState
@inject IPharmService PharmService


<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid DataSource="@GridData" AllowSorting="true" ShowColumnChooser="true" GridLines="GridLine.Vertical"  AllowFiltering="false" AllowPaging="true"  Toolbar="@(new List<string>() { "Add" })" Height="315">
                <GridPageSettings PageCount="5"></GridPageSettings>
                <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" ShowDeleteConfirmDialog="true"></GridEditSettings>
                <GridEvents OnRecordDoubleClick="RecordDoubleClickHandler" OnActionBegin="OnBeginHandler" TValue="SprBux"></GridEvents>
                <GridColumns>
                    <GridColumn Field=@nameof(SprBux.Id) HeaderText="Id" Visible="false" IsPrimaryKey="true" ></GridColumn>
                    <GridColumn Field=@nameof(SprBux.BuxKod) HeaderText="Код" AllowEditing="false" Width="100"></GridColumn>
                    <GridColumn Field=@nameof(SprBux.BuxLog) HeaderText="Логин" TextAlign="TextAlign.Right" Width="100"></GridColumn>
                    <GridColumn Field=@nameof(SprBux.BuxPsw) HeaderText="Пароль" TextAlign="TextAlign.Right" Width="100"></GridColumn>

                    <GridColumn Field=@nameof(SprBux.BuxTab) HeaderText="Таб" ForeignKeyValue="KdrFio" ForeignKeyField="KdrKod"  DataSource="@kdr" TextAlign="TextAlign.Right" Width="100">
                        <EditTemplate>
                            <SfDropDownList ID="BuxTab" Placeholder="Выбор из кадра" PopupWidth="200" TItem="SprKdr" TValue="string" DataSource="@kdr">
                                <DropDownListFieldSettings Text="KdrFio" Value="KdrKod"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </EditTemplate>
                    </GridColumn>

                    <GridColumn Field=@nameof(SprBux.BuxKey) HeaderText="Штатка" ForeignKeyValue="SttStrNam" ForeignKeyField="SttStrKey" DataSource="@sttstr" EditType="EditType.DropDownEdit" Width="200">
                        <EditTemplate>
                            <SfDropDownList ID="BuxKey" Placeholder="Выбор штатки" TItem="SprSttStr" TValue="string" DataSource="@sttstr">
                                <DropDownListEvents TValue="string" ValueChange="ValueChange"></DropDownListEvents>
                                <DropDownListFieldSettings Text="SttStrNam" Value="SttStrKey"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </EditTemplate>
                    </GridColumn>

                    <GridColumn Field=@nameof(SprBux.DlgNam) HeaderText="Спец" EditType="EditType.DropDownEdit" Width="200">
                        <EditTemplate>
                            <SfDropDownList ID="DlgNam" Placeholder="Выбор должности" TItem="SprDlg" Enabled="@Enabled" TValue="string" DataSource="@sprdlg">
                                <DropDownListFieldSettings Text="DlgNam" Value="DlgNam"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </EditTemplate>
                    </GridColumn>

                    <GridColumn Field=@nameof(SprBux.BuxStf) HeaderText="Ставка" EditType="EditType.NumericEdit" Format="N2" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(SprBux.BuxMol) HeaderText="МОЛ" EditType="EditType.BooleanEdit" DisplayAsCheckBox="true" Width="100"></GridColumn>
                    <GridColumn Field=@nameof(SprBux.BuxUbl) HeaderText="Уволен" EditType="EditType.BooleanEdit" DisplayAsCheckBox="true" Width="100"></GridColumn>
                    <GridColumn HeaderText="Изм Удл" Width="100">
                        <GridCommandColumns>
                            <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-edit", CssClass="e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-delete", CssClass="e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-save", CssClass="e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-cancel-icon", CssClass="e-flat" })"></GridCommandColumn>
                        </GridCommandColumns>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>



@code{
        string Pol;

        // Create and empty list, named viideos, of empty Video objects.
        IEnumerable<SprBux> GridData;
    public bool Enabled = false;

    //   public List<string> SprStt = new List<string>() { "United States", "Australia" };
    //public List<string> SprDlg = new List<string>() { "New York", "Virginia", "Washington" };
    public IEnumerable<SprKdr> kdr;
    public IEnumerable<SprSttStr> sttstr;
    public List<SprDlg> sprdlg;
    //  public List<string> sprdlg;

    protected override async Task OnInitializedAsync()
    {
        //Populate the list of video objects from the Video table.
        kdr = await PharmService.Pharm_GetSprKdr(AppState.BuxFrm);
        sttstr = await PharmService.Pharm_GetSprSttStr(AppState.BuxFrm);
        sprdlg = PharmService.Pharm_GetSprDlg(AppState.BuxFrm, "");
        GridData = await PharmService.Pharm_GetSprBux(AppState.BuxFrm, AppState.BuxUbl);
    }

    protected async Task OnBeginHandler(ActionEventArgs<SprBux> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save || Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            var sprbux = Args.Data;
            if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
            {
                sprbux.DlgNam = "DELETE";
            }
            else
            {
                if (Args.Action == "add")
                {
                    sprbux.BuxFrm = AppState.BuxFrm;
                }
                else
                {
                    if (sprbux.BuxTab == null) sprbux.BuxTab = Args.PreviousData.BuxTab;
                    if (sprbux.BuxKey == null) sprbux.BuxKey = Args.PreviousData.BuxKey;
                    if (sprbux.DlgNam == null) sprbux.DlgNam = Args.PreviousData.DlgNam;
                }
            }

            //update data into your db

            //if (sprbux.BuxKod == 0)
            //{
            // Insert if id is zero.
            await PharmService.Pharm_UpdSprBux(sprbux);
            //    }
            //    else
            //    {
            //        // Update if id not 0
            //        //   await VideoService.VideoUpdate(video);
            //    }
        }
    }


    public void ActionCompleteHandler(ActionEventArgs<SprBux> Args)
    {
        //if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        //{
        //    if (Args.Action == "add")
        //    {
        //        var t = Args.Data; //returns the edited / insrted record details.
        //                           //insert into your db
        //    }
        //    else
        //    {
        //        //update data into your db
        //    }
        //}
        //if (args.RequestType == Action.Save)
        //{
        //    //var id = args.Data.Id;
        //    //var value = OrdData.Find(X => X.OrderID == Args.Data.OrderID);
        //    if (args.Action == "add")
        //    {
        //        //await Service.InsertOrderAsync(Args.Data);
        //    }
        //    else
        //    {
        //        //await Service.UpdateOrderAsync(Args.Data.OrderID.ToString(), Args.Data);
        //    }
        //}
        //if (args.RequestType == Action.Delete)
        //{
        //    //await Service.DeleteOrderAsync(Args.Data.OrderID.ToString());
        //}
        Enabled = false;
    }


    public void CommandClickHandler(CommandClickEventArgs<SprBux> args)
    {
        if (args.CommandColumn.Type != CommandButtonType.Save)
            return;

        var lookup = args.RowData;

        StateHasChanged();
    }


    public void RowSelectHandler(RowSelectEventArgs<SprBux> args)
    {
        // Here you can customize your code
        var t = args.Data; //returns the edited / insrted record details.
                           //insert into your db
    }


    public void RecordDoubleClickHandler(RecordDoubleClickEventArgs<SprBux> args)
    {
        // Here you can customize your code
        var t = args.RowData; //returns the edited / insrted record details.
    }


    public void ValueChange(@Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        AppState.StrKey = args.Value;
        sprdlg.Clear();
        //sprdlg = new List<SprDlg>() { new SprDlg { DlgKod = 1, DlgNam = "m1"},
        //            new SprDlg{DlgKod = 2, DlgNam = "m2" },
        //            new SprDlg{DlgKod = 3, DlgNam = "m3" },};

        sprdlg = PharmService.Pharm_GetSprDlg(AppState.BuxFrm, AppState.StrKey);
        Enabled = true;
    }


}