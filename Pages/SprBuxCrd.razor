@page "/sprbuxcrd"
@layout MainLayout


@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns

@using DauaPharm.Data;
@using DauaPharm.Data.Entities;

@inject AppState AppState
@inject IPharmService PharmService


<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid DataSource="@GridData" AllowSorting="true" AllowFiltering="false" AllowPaging="true" Toolbar="@(new List<string>() { "Add" })" Height="315">
                <GridPageSettings PageCount="5"></GridPageSettings>
                <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
                <GridEvents OnRecordDoubleClick="RecordDoubleClickHandler" OnActionBegin="OnBeginHandler" TValue="SprBux"></GridEvents>
                <GridColumns>
                    <GridColumn Field=@nameof(SprBux.BuxKod) HeaderText="Код" IsPrimaryKey="true" Width="50"></GridColumn>
                    <GridColumn Field=@nameof(SprBux.BuxLog) HeaderText="Логин" TextAlign="TextAlign.Right" Width="100"></GridColumn>
                    <GridColumn Field=@nameof(SprBux.BuxPsw) HeaderText="Пароль" TextAlign="TextAlign.Right" Width="100"></GridColumn>
                    
                    <GridColumn Field=@nameof(SprBux.BuxTab) HeaderText="Таб" ForeignKeyValue="KdrFio" ForeignKeyField="KdrKod" DataSource="@kdr" TextAlign="TextAlign.Right" Width="100">
                        <EditTemplate>
                            <SfDropDownList ID="sdsTab" Placeholder="Выбор из кадра" PopupWidth="200" TItem="SprKdr" TValue="string" DataSource="@kdr">
                                <DropDownListFieldSettings Text="KdrFio" Value="KdrKod"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </EditTemplate>
                    </GridColumn>
                    
                    <GridColumn Field=@nameof(SprBux.BuxKey) HeaderText="Штатка" ForeignKeyValue="SttStrNam" ForeignKeyField="SttStrKey" DataSource="@sttstr" EditType="EditType.DropDownEdit" Width="200">
                        <EditTemplate>
                            <SfDropDownList ID="sdsStt" Placeholder="Выбор штатки" TItem="SprSttStr" TValue="string" DataSource="@sttstr">
                                <DropDownListEvents TValue="string" ValueChange="ValueChange"></DropDownListEvents>
                                <DropDownListFieldSettings Text="SttStrNam" Value="SttStrKey"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </EditTemplate>
                    </GridColumn>
                    
                    <GridColumn Field=@nameof(SprBux.BuxDlg) HeaderText="Спец" ForeignKeyValue="DlgNam" ForeignKeyField="DlgKod" DataSource="@sprdlg" EditType="EditType.DropDownEdit" Width="200">
                        <EditTemplate>
                            <SfDropDownList ID="sdsDlg" Placeholder="Выбор должности" TItem="SprDlg" Enabled="@Enabled" TValue="string" DataSource="@sprdlg">
                                <DropDownListFieldSettings Text="DlgNam" Value="DlgKod"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </EditTemplate>
                    </GridColumn>
                    
                    <GridColumn Field=@nameof(SprBux.BuxMol) HeaderText="МОЛ" EditType="EditType.BooleanEdit" DisplayAsCheckBox="true" Width="100"></GridColumn>
                    <GridColumn Field=@nameof(SprBux.BuxUbl) HeaderText="Уволен" EditType="EditType.BooleanEdit" DisplayAsCheckBox="true" Width="100"></GridColumn>
                    <GridColumn HeaderText="Изм Удл" Width="100">
                        <GridCommandColumns>
                            <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-edit", CssClass="e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-delete", CssClass="e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-save", CssClass="e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-cancel-icon", CssClass="e-flat" })"></GridCommandColumn>
                        </GridCommandColumns>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>



@code{
    string Pol;

    // Create and empty list, named viideos, of empty Video objects.
    IEnumerable<SprBux> GridData;
    public bool Enabled = false;

    //   public List<string> SprStt = new List<string>() { "United States", "Australia" };
    //public List<string> SprDlg = new List<string>() { "New York", "Virginia", "Washington" };
    public IEnumerable<SprKdr> kdr;
    public IEnumerable<SprSttStr> sttstr;
    public IEnumerable<SprDlg> sprdlg;

    protected override async Task OnInitializedAsync()
    {
        //Populate the list of video objects from the Video table.
        GridData = await PharmService.Pharm_GetSprBux(AppState.BuxFrm, AppState.BuxUbl);
        kdr = await PharmService.Pharm_GetSprKdr(AppState.BuxFrm);
        sttstr = await PharmService.Pharm_GetSprSttStr(AppState.BuxFrm);
        sprdlg = await PharmService.Pharm_GetSprDlg();
    }

    private void OnBeginHandler(ActionEventArgs<SprBux> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (Args.Action == "add")
            {
                var t = Args.Data; //returns the edited / insrted record details.
                                   //insert into your db
            }
            else
            {
                //update data into your db
            }
        }
    }


    public void ActionCompleteHandler(ActionEventArgs<SprBux> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (Args.Action == "add")
            {
                var t = Args.Data; //returns the edited / insrted record details.
                                   //insert into your db
            }
            else
            {
                //update data into your db
            }
        }
        //if (args.RequestType == Action.Save)
        //{
        //    //var id = args.Data.Id;
        //    //var value = OrdData.Find(X => X.OrderID == Args.Data.OrderID);
        //    if (args.Action == "add")
        //    {
        //        //await Service.InsertOrderAsync(Args.Data);
        //    }
        //    else
        //    {
        //        //await Service.UpdateOrderAsync(Args.Data.OrderID.ToString(), Args.Data);
        //    }
        //}
        //if (args.RequestType == Action.Delete)
        //{
        //    //await Service.DeleteOrderAsync(Args.Data.OrderID.ToString());
        //}
        Enabled = false;
    }


    public void CommandClickHandler(CommandClickEventArgs<SprBux> args)
    {
        if (args.CommandColumn.Type != CommandButtonType.Save)
            return;

        var lookup = args.RowData;

        StateHasChanged();
    }


    public void RowSelectHandler(RowSelectEventArgs<SprBux> args)
    {
        // Here you can customize your code
        var t = args.Data; //returns the edited / insrted record details.
                           //insert into your db
    }


    public void RecordDoubleClickHandler(RecordDoubleClickEventArgs<SprBux> args)
    {
        // Here you can customize your code
        var t = args.RowData; //returns the edited / insrted record details.
    }


    public void ValueChange(@Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        if (args.Value == "United States")
        {
            //   States = new List<string>() { "New York", "Virginia", "Washington" };
        }
        else if (args.Value == "Australia")
        {
            //    States = new List<string>() { "Queensland", "Tasmania", "Victoria" };
        }
        Enabled = true;
    }


}